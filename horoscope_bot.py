# ---------------------- horoscope_bot.py ----------------------
import streamlit as st
import requests
import datetime
from fpdf import FPDF
from io import BytesIO
from bedrock_claude import get_claude_prediction
from fpdf.enums import XPos, YPos

FONT_PATH = "NotoSansDevanagari-Regular.ttf"

def get_rashi(degree: float) -> str:
    rashis = [
        "‡§Æ‡•á‡§∑ (Aries)", "‡§µ‡•É‡§∑‡§≠ (Taurus)", "‡§Æ‡§ø‡§•‡•Å‡§® (Gemini)", "‡§ï‡§∞‡•ç‡§ï (Cancer)",
        "‡§∏‡§ø‡§Ç‡§π (Leo)", "‡§ï‡§®‡•ç‡§Ø‡§æ (Virgo)", "‡§§‡•Å‡§≤‡§æ (Libra)", "‡§µ‡•É‡§∂‡•ç‡§ö‡§ø‡§ï (Scorpio)",
        "‡§ß‡§®‡•Å (Sagittarius)", "‡§Æ‡§ï‡§∞ (Capricorn)", "‡§ï‡•Å‡§Ç‡§≠ (Aquarius)", "‡§Æ‡•Ä‡§® (Pisces)"
    ]
    return rashis[int(degree // 30)]

def moon_prediction(rashi: str) -> str:
    return {
        "‡§Æ‡•á‡§∑ (Aries)":  "‡§Ü‡§™ ‡§ä‡§∞‡•ç‡§ú‡§æ‡§µ‡§æ‡§® ‡§î‡§∞ ‡§∏‡§æ‡§π‡§∏‡•Ä ‡§π‡•à‡§Ç‡•§ ‡§®‡•á‡§§‡•É‡§§‡•ç‡§µ ‡§ï‡§∞‡§®‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        "‡§µ‡•É‡§∑‡§≠ (Taurus)": "‡§Ü‡§™ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        "‡§Æ‡§ø‡§•‡•Å‡§® (Gemini)": "‡§Ü‡§™ ‡§ú‡§ø‡§ú‡•ç‡§û‡§æ‡§∏‡•Å ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡§Ç‡•§",
        "‡§ï‡§∞‡•ç‡§ï (Cancer)":  "‡§Ü‡§™ ‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§§ ‡§π‡•à‡§Ç‡•§",
        "‡§∏‡§ø‡§Ç‡§π (Leo)":    "‡§Ü‡§™ ‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏‡•Ä ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§∂‡•ã‡§™‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡§Ç‡•§",
        "‡§ï‡§®‡•ç‡§Ø‡§æ (Virgo)":  "‡§Ü‡§™ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§π‡•à‡§Ç‡•§",
        "‡§§‡•Å‡§≤‡§æ (Libra)":   "‡§Ü‡§™ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§î‡§∞ ‡§®‡•ç‡§Ø‡§æ‡§Ø ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à‡§Ç‡•§",
        "‡§µ‡•É‡§∂‡•ç‡§ö‡§ø‡§ï (Scorpio)": "‡§Ü‡§™ ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø‡•Ä ‡§î‡§∞ ‡§§‡•Ä‡§µ‡•ç‡§∞ ‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§µ‡§æ‡§≤‡•á ‡§π‡•à‡§Ç‡•§",
        "‡§ß‡§®‡•Å (Sagittarius)": "‡§Ü‡§™ ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞‡§§‡§æ ‡§™‡•ç‡§∞‡§ø‡§Ø ‡§î‡§∞ ‡§¶‡§æ‡§∞‡•ç‡§∂‡§®‡§ø‡§ï ‡§π‡•à‡§Ç‡•§",
        "‡§Æ‡§ï‡§∞ (Capricorn)":   "‡§Ü‡§™ ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§¶‡§æ‡§∞ ‡§î‡§∞ ‡§™‡§∞‡§Ç‡§™‡§∞‡§æ‡§µ‡§æ‡§¶‡•Ä ‡§π‡•à‡§Ç‡•§",
        "‡§ï‡•Å‡§Ç‡§≠ (Aquarius)":   "‡§Ü‡§™ ‡§µ‡§ø‡§ö‡§æ‡§∞‡§∂‡•Ä‡§≤ ‡§î‡§∞ ‡§®‡§µ‡•Ä‡§®‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∞‡•Å‡§ö‡§ø ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        "‡§Æ‡•Ä‡§® (Pisces)":      "‡§Ü‡§™ ‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤ ‡§î‡§∞ ‡§ï‡§≤‡§æ‡§§‡•ç‡§Æ‡§ï ‡§π‡•à‡§Ç‡•§"
    }.get(rashi, "‡§Ü‡§™‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ó‡•Å‡§£ ‡§π‡•à‡§Ç‡•§")

def generate_pdf(payload: dict, positions: dict, prediction: str) -> bytes:
    pdf = FPDF()
    pdf.add_page()

    pdf.add_font("Unicode", "", FONT_PATH, uni=True)
    pdf.set_font("Unicode", "", 14)
    pdf.cell(0, 10, "‡§µ‡•á‡§¶‡§ø‡§ï ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align="C")
    pdf.ln(8)

    pdf.set_font("Unicode", "", 12)
    pdf.cell(0, 10, "‡§ú‡§®‡•ç‡§Æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    for key, val in payload.items():
        pdf.cell(0, 8, f"{key.capitalize()}: {val}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)

    pdf.ln(6)
    pdf.cell(0, 10, "‡§ó‡•ç‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    for planet, deg in positions.items():
        rashi = get_rashi(deg)
        pdf.cell(0, 8, f"{planet}: {deg:.2f}¬∞ - {rashi}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)

    if "Moon" in positions:
        moon_rashi = get_rashi(positions["Moon"])
        pdf.ln(6)
        pdf.cell(0, 10, f"‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§∞‡§æ‡§∂‡§ø: {moon_rashi}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.multi_cell(0, 8, f"‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä: {moon_prediction(moon_rashi)}")

    if prediction:
        pdf.ln(6)
        pdf.set_font("Unicode", "", 11)
        pdf.cell(0, 10, "AI ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.multi_cell(0, 8, prediction)

    buffer = BytesIO()
    pdf.output(buffer)
    return buffer.getvalue()

# ---------------------------- UI ---------------------------------
st.set_page_config(page_title="Vedic Horoscope Generator", layout="centered")
st.title("Horoscope Generator (‡§µ‡•á‡§¶‡§ø‡§ï ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä)")

with st.form("form"):
    dob = st.date_input("‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø", datetime.date(1990, 1, 1),
                        min_value=datetime.date(1900, 1, 1),
                        max_value=datetime.date.today())
    tob = st.time_input("‡§ú‡§®‡•ç‡§Æ ‡§∏‡§Æ‡§Ø")
    lat = st.number_input("‡§Ö‡§ï‡•ç‡§∑‡§æ‡§Ç‡§∂ (Latitude)", value=26.8467, format="%.4f")
    lon = st.number_input("‡§¶‡•á‡§∂‡§æ‡§Ç‡§§‡§∞ (Longitude)", value=80.9462, format="%.4f")
    tz  = st.number_input("‡§∏‡§Æ‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (Timezone)", value=5.5, format="%.1f")
    submit = st.form_submit_button("üîÆ ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§¨‡§®‡§æ‡§è‡§Å")

if submit:
    payload = {
        "date": str(dob),
        "time": str(tob)[:5],
        "latitude": lat,
        "longitude": lon,
        "timezone": tz
    }

    try:
        res  = requests.post("http://localhost:5001/api/kundli", json=payload)
        data = res.json()

        if "planet_positions" in data:
            positions = data["planet_positions"]

            # Claude Foundation Model Prediction
            prediction = get_claude_prediction(payload, positions)

            st.success("‚úÖ ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§®‡§æ‡§à ‡§ó‡§à")

            st.subheader("‡§ó‡•ç‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø")
            for planet, deg in positions.items():
                rashi = get_rashi(deg)
                st.write(f"**{planet}**: {deg:.2f}¬∞ - {rashi}")

            if "Moon" in positions:
                moon_rashi = get_rashi(positions["Moon"])
                st.subheader("‡§ö‡§Ç‡§¶‡•ç‡§∞ ‡§∞‡§æ‡§∂‡§ø")
                st.success(f"‡§Ü‡§™‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø ‡§π‡•à: **{moon_rashi}**")
                st.markdown(f"**‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä:** {moon_prediction(moon_rashi)}")

            if prediction:
                st.subheader("ü§ñ Claude AI ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä")
                st.info(prediction)

            pdf_bytes = generate_pdf(payload, positions, prediction)
            st.download_button(
                label="üì• ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä PDF ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
                data=pdf_bytes,
                file_name="kundli_report.pdf",
                mime="application/pdf"
            )
        else:
            st.error("‚ùå ‡§ï‡•Å‡§Ç‡§°‡§≤‡•Ä ‡§°‡•á‡§ü‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")

    except Exception as e:
        st.error(f"‚ùå ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")
